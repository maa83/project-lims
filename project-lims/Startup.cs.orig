using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Routing;
using Microsoft.AspNetCore.Routing.Constraints;

using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http.Authentication;

using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Authorization;

using Microsoft.AspNetCore.Identity;

using AutoMapper;

using Lims.Models;
using Lims.Managers;
using Lims.BaseModels;
using Lims.ViewModels;
using Lims.TransferModels;

namespace Lims
{
    public class Startup
    {
        public Startup(IConfiguration configuration, IHostingEnvironment env)
        {
            env.EnvironmentName = "Development";
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddLogging();

            //look at https://github.com/aspnet/Identity/blob/de3e6e08b43ee995f3a247c502fc88c1458f3ced/src/Identity/IdentityServiceCollectionExtensions.cs#L24
            #region No need for adding cookies authentication manually because services.AddIdentityAutomatically add them. Just services.ConfigureApplicationCookie(config)
            // services.AddAuthentication( options => {

            //     string scheme = CookieAuthenticationDefaults.AuthenticationScheme;

            //     options.DefaultAuthenticateScheme = scheme;
            //     options.DefaultChallengeScheme = scheme;
            //     options.DefaultScheme = scheme;

            // }).AddCookie( options => {
            //     options.Cookie.Name = "auth";
            //     options.SlidingExpiration = true;
            //     options.ExpireTimeSpan = TimeSpan.FromMinutes(30);

            //     //No need for the below since cookie authentication returns 401 for ajax calls by default.
            //     options.Events.OnRedirectToLogin = ctx => 
            //     {
            //         ctx.Response.Headers["Location"] = ctx.RedirectUri;
            //         ctx.Response.StatusCode = 401;
            //         return Task.CompletedTask;
            //     };
            //     options.Events.OnRedirectToAccessDenied = ctx =>
            //     {
            //         ctx.Response.Headers["Location"] = ctx.RedirectUri;
            //         ctx.Response.StatusCode = 401;
            //         return Task.CompletedTask;
            //     };
            // });
            #endregion

            // services.AddDbContext<LimsContext>(builder => 
            // { 
            //     //builder.UseSqlite(@"data source=D:\db.db;", ctxOptions => { ctxOptions.CommandTimeout(120); });
            //     //builder.UseInMemoryDatabase("LimsDb");
            // });
            services.AddSingleton<LimsContext>( provider => 
            {
                var db = new LimsContext();
                db.Database.EnsureCreated();
                return db;
            } );
            services.AddTransient<ContactsManager>( provider => {
                var db = provider.GetService<LimsContext>();
                return new ContactsManager(db);
            } );
            services.AddTransient<TestsManager>( provider => {
                var db = provider.GetService<LimsContext>();
                return new TestsManager(db, provider);
            } );
            services.AddTransient<SamplesManager>( provider => {
                var db = provider.GetService<LimsContext>();
                return new SamplesManager(db, provider);
            } );

            Mapper.Initialize( cfg => {
                cfg.CreateMap<SampleTestParameterBaseModel, SampleTestParameterModel>();
                cfg.CreateMap<SampleBaseModel, SampleModel>();
                cfg.CreateMap<QuotationBaseModel, QuotationModel>();
                cfg.CreateMap<PurchaseOrderRequestTransferModel, PurchaseOrderRequestModel>();

                //model to transfer/viewmodels
                cfg.CreateMap<SampleTestParameterModel, SampleTestParameterBaseModel>();
                cfg.CreateMap<SampleModel, SampleViewModel>().Include<SampleTestParameterModel, TestParameterMethodViewModel>();
                cfg.CreateMap<PurchaseOrderRequestModel, PurchaseOrderRequestViewModel>().Include<SampleModel, SampleViewModel>();
            } );

            #region Identity Initialization Options
            // services.AddDefaultIdentity<LimsUser>( config => {
            //     config.User.RequireUniqueEmail = true;
            // } ).AddEntityFrameworkStores<LimsContext>();
            // services.AddIdentityCore<LimsUser>( config => {
            //     config.User.RequireUniqueEmail = true;
            // } ).AddEntityFrameworkStores<LimsContext>();
            #endregion

            services.AddIdentity<LimsUser, IdentityRole<int>>( config => {
                
                config.User.RequireUniqueEmail = true;

                config.ClaimsIdentity.UserIdClaimType = "UserId";
                config.ClaimsIdentity.UserNameClaimType = "UserName";
                config.ClaimsIdentity.RoleClaimType = "Role";
                
            } ).AddEntityFrameworkStores<LimsContext>();
            services.ConfigureApplicationCookie( config => {
                // config.LoginPath = "";
                // config.Events.OnRedirectToLogin = (cOptions) => { cOptions.RedirectUri = ""; cOptions.Response.StatusCode = Microsoft.AspNetCore.Http.StatusCodes.Status401Unauthorized; return Task.CompletedTask; };
            } );

            services.AddAuthorization( config => {
                // config.AddPolicy("policyName", policy => {
                //     policy.RequireClaim("");
                //     policy.RequireAssertion( c => c.User.HasClaim("", "") && c.User.Identity.Name == "" );
                // });
            } );

            services.AddMvc( config => {
            } );
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory logger)
        {
            logger.AddConsole(Configuration.GetSection("Logging"));
            logger.AddDebug();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseAuthentication();

            //app.UseMvc();
            app.UseMvcWithDefaultRoute();

            app.UseStaticFiles();
            app.UseStaticFiles( new StaticFileOptions() {
                FileProvider = new Microsoft.Extensions.FileProviders.PhysicalFileProvider(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(),  "ui")),
                RequestPath = "/ui"
            });
        }
    }
}
